"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MovieCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const graphql_fields_1 = tslib_1.__importDefault(require("graphql-fields"));
const AggregateMovieArgs_1 = require("./args/AggregateMovieArgs");
const CreateOneMovieArgs_1 = require("./args/CreateOneMovieArgs");
const DeleteManyMovieArgs_1 = require("./args/DeleteManyMovieArgs");
const DeleteOneMovieArgs_1 = require("./args/DeleteOneMovieArgs");
const FindFirstMovieArgs_1 = require("./args/FindFirstMovieArgs");
const FindManyMovieArgs_1 = require("./args/FindManyMovieArgs");
const FindUniqueMovieArgs_1 = require("./args/FindUniqueMovieArgs");
const GroupByMovieArgs_1 = require("./args/GroupByMovieArgs");
const UpdateManyMovieArgs_1 = require("./args/UpdateManyMovieArgs");
const UpdateOneMovieArgs_1 = require("./args/UpdateOneMovieArgs");
const UpsertOneMovieArgs_1 = require("./args/UpsertOneMovieArgs");
const helpers_1 = require("../../../helpers");
const Movie_1 = require("../../../models/Movie");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateMovie_1 = require("../../outputs/AggregateMovie");
const MovieGroupBy_1 = require("../../outputs/MovieGroupBy");
let MovieCrudResolver = class MovieCrudResolver {
    async aggregateMovie(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async createOneMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async movies(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async movie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByMovie(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneMovie(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).movie.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateMovie_1.AggregateMovie, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateMovieArgs_1.AggregateMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "aggregateMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Movie_1.Movie, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneMovieArgs_1.CreateOneMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "createOneMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyMovieArgs_1.DeleteManyMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "deleteManyMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Movie_1.Movie, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneMovieArgs_1.DeleteOneMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "deleteOneMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Movie_1.Movie, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstMovieArgs_1.FindFirstMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "findFirstMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Movie_1.Movie], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyMovieArgs_1.FindManyMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "movies", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Movie_1.Movie, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueMovieArgs_1.FindUniqueMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "movie", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [MovieGroupBy_1.MovieGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByMovieArgs_1.GroupByMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "groupByMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyMovieArgs_1.UpdateManyMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "updateManyMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Movie_1.Movie, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneMovieArgs_1.UpdateOneMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "updateOneMovie", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Movie_1.Movie, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneMovieArgs_1.UpsertOneMovieArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], MovieCrudResolver.prototype, "upsertOneMovie", null);
MovieCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Movie_1.Movie)
], MovieCrudResolver);
exports.MovieCrudResolver = MovieCrudResolver;
