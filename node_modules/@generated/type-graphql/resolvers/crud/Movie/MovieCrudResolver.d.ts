import { GraphQLResolveInfo } from "graphql";
import { AggregateMovieArgs } from "./args/AggregateMovieArgs";
import { CreateOneMovieArgs } from "./args/CreateOneMovieArgs";
import { DeleteManyMovieArgs } from "./args/DeleteManyMovieArgs";
import { DeleteOneMovieArgs } from "./args/DeleteOneMovieArgs";
import { FindFirstMovieArgs } from "./args/FindFirstMovieArgs";
import { FindManyMovieArgs } from "./args/FindManyMovieArgs";
import { FindUniqueMovieArgs } from "./args/FindUniqueMovieArgs";
import { GroupByMovieArgs } from "./args/GroupByMovieArgs";
import { UpdateManyMovieArgs } from "./args/UpdateManyMovieArgs";
import { UpdateOneMovieArgs } from "./args/UpdateOneMovieArgs";
import { UpsertOneMovieArgs } from "./args/UpsertOneMovieArgs";
import { Movie } from "../../../models/Movie";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateMovie } from "../../outputs/AggregateMovie";
import { MovieGroupBy } from "../../outputs/MovieGroupBy";
export declare class MovieCrudResolver {
    aggregateMovie(ctx: any, info: GraphQLResolveInfo, args: AggregateMovieArgs): Promise<AggregateMovie>;
    createOneMovie(ctx: any, info: GraphQLResolveInfo, args: CreateOneMovieArgs): Promise<Movie>;
    deleteManyMovie(ctx: any, info: GraphQLResolveInfo, args: DeleteManyMovieArgs): Promise<AffectedRowsOutput>;
    deleteOneMovie(ctx: any, info: GraphQLResolveInfo, args: DeleteOneMovieArgs): Promise<Movie | null>;
    findFirstMovie(ctx: any, info: GraphQLResolveInfo, args: FindFirstMovieArgs): Promise<Movie | null>;
    movies(ctx: any, info: GraphQLResolveInfo, args: FindManyMovieArgs): Promise<Movie[]>;
    movie(ctx: any, info: GraphQLResolveInfo, args: FindUniqueMovieArgs): Promise<Movie | null>;
    groupByMovie(ctx: any, info: GraphQLResolveInfo, args: GroupByMovieArgs): Promise<MovieGroupBy[]>;
    updateManyMovie(ctx: any, info: GraphQLResolveInfo, args: UpdateManyMovieArgs): Promise<AffectedRowsOutput>;
    updateOneMovie(ctx: any, info: GraphQLResolveInfo, args: UpdateOneMovieArgs): Promise<Movie | null>;
    upsertOneMovie(ctx: any, info: GraphQLResolveInfo, args: UpsertOneMovieArgs): Promise<Movie>;
}
